import React, { useState, useEffect } from 'react';
import { 
  MessageSquare, 
  Plus, 
  Trash2, 
  Search, 
  Settings, 
  User, 
  Wifi, 
  WifiOff,
  Loader,
  CheckCircle,
  AlertCircle,
  Eye,
  X,
  ChevronRight,
  FileText
} from 'lucide-react';
import SimpleScanInterface from './components/SimpleScanInterface';
import DiamondScanInterface from './components/DiamondScanInterface';
import MessageWizard from './components/MessageWizard';
import MessagePreview from './components/MessagePreview';
import SmartSearchResults from './components/SmartSearchResults';
import ScanningWindow from './components/ScanningWindow';
import SemanticSearchModal from './components/SemanticSearchModal';

interface Account {
  id: string;
  label: string;
  phone: string;
  api_id: number;
  api_hash: string;
  is_authenticated: boolean;
  username?: string;
}

interface LoginData {
  accountId: string;
  phone_code_hash?: string;
  needsCode: boolean;
  needs2FA: boolean;
}

interface ScanProgress {
  type?: string;
  chat_id?: number;
  chat_name?: string;
  current_index?: number;
  total?: number;
  status?: string;
  chats?: any[];
  messages_found?: number;
  messages_deleted?: number;
  total_to_delete?: number;
  // For final summary
  completed?: number;
  skipped?: number;
  errors?: number;
  totalMessages?: number;
  totalDeleted?: number;
}

function App() {
  const [accounts, setAccounts] = useState<Account[]>([]);
  const [showAddForm, setShowAddForm] = useState(false);
  const [loginData, setLoginData] = useState<LoginData | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  
  // Visual scan states
  const [showVisualScan, setShowVisualScan] = useState(false);
  const [selectedAccountForScan, setSelectedAccountForScan] = useState<string | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState<ScanProgress | undefined>();
  const [lastScanResults, setLastScanResults] = useState<any[]>([]);
  const [language, setLanguage] = useState<'he' | 'en'>('he');
  const [showSettings, setShowSettings] = useState(false);
  const [uiMode, setUiMode] = useState<'simple' | 'advanced' | 'diamond'>('diamond');
  const [showScanModal, setShowScanModal] = useState(false);
  const [scanHistory, setScanHistory] = useState<{[accountId: string]: any[]}>({});
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [showMessageWizard, setShowMessageWizard] = useState(false);
  const [showFeaturesFile, setShowFeaturesFile] = useState(false);
  
  // Global scanning window states
  const [showGlobalScanWindow, setShowGlobalScanWindow] = useState(false);
  const [globalScanningItems, setGlobalScanningItems] = useState<any[]>([]);
  const [globalCurrentScanningItem, setGlobalCurrentScanningItem] = useState<any>(null);
  const [globalIsPaused, setGlobalIsPaused] = useState(false);
  const [globalScanProgress, setGlobalScanProgress] = useState<any>(null);
  
  // Message preview states
  const [showMessagePreview, setShowMessagePreview] = useState(false);
  
  // Semantic search states
  const [showSemanticSearch, setShowSemanticSearch] = useState(false);
  const [semanticSearchResults, setSemanticSearchResults] = useState<any[]>([]);
  const [isSemanticSearching, setIsSemanticSearching] = useState(false);
  const [semanticSearchProgress, setSemanticSearchProgress] = useState<any>(null);
  const [previewMessages, setPreviewMessages] = useState<any[]>([]);
  
  // Smart search states
  const [showSmartSearch, setShowSmartSearch] = useState(false);
  const [searchResults, setSearchResults] = useState<any>({});

  // Form states
  const [newAccount, setNewAccount] = useState({
    label: '',
    api_id: '',
    api_hash: '',
    phone: ''
  });
  
  const [verificationCode, setVerificationCode] = useState('');
  const [twoFactorPassword, setTwoFactorPassword] = useState('');

  useEffect(() => {
    loadAccounts();
    loadScanHistory();
  }, []);

  const loadScanHistory = () => {
    try {
      const saved = localStorage.getItem('telegram-scan-history');
      if (saved) {
        setScanHistory(JSON.parse(saved));
      }
    } catch (error) {
      console.error('Failed to load scan history:', error);
    }
  };

  const saveScanHistory = (accountId: string, results: any[]) => {
    try {
      const newHistory = { ...scanHistory, [accountId]: results };
      setScanHistory(newHistory);
      localStorage.setItem('telegram-scan-history', JSON.stringify(newHistory));
    } catch (error) {
      console.error('Failed to save scan history:', error);
    }
  };

  const loadAccounts = async () => {
    setLoading(true);
    try {
      console.log('Loading accounts from http://127.0.0.1:8000/accounts');
      const response = await fetch('http://127.0.0.1:8000/accounts');
      console.log('Response status:', response.status);
      console.log('Response ok:', response.ok);
      
      if (response.ok) {
        const data = await response.json();
        console.log('Raw data from API:', data);
        const updatedAccounts = data.map((acc: any) => ({
          ...acc,
          is_authenticated: acc.is_authenticated || false
        }));
        setAccounts(updatedAccounts);
        console.log('Loaded accounts:', updatedAccounts);
      } else {
        console.error('Response not ok:', response.status, response.statusText);
        setError(`Failed to load accounts: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.error('Failed to load accounts:', error);
      setError('Failed to load accounts: ' + (error as Error).message);
    } finally {
      setLoading(false);
    }
  };

  const handleAddAccount = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(null);

    try {
      const response = await fetch('http://127.0.0.1:8000/accounts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          label: newAccount.label,
          api_id: parseInt(newAccount.api_id),
          api_hash: newAccount.api_hash,
          phone: newAccount.phone
        }),
      });

      const data = await response.json();

      if (data.success) {
        setSuccess('Account added successfully!');
        setNewAccount({ label: '', api_id: '', api_hash: '', phone: '' });
        setShowAddForm(false);
        await loadAccounts();
      } else {
        setError(data.error || 'Failed to add account');
      }
    } catch (error) {
      console.error('Add account error:', error);
      setError('Network error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleConnect = async (accountId: string) => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch(`http://127.0.0.1:8000/accounts/${accountId}/connect`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({}),
      });

      const data = await response.json();

      if (data.success) {
        if (data.status === 'CODE_SENT') {
          setLoginData({
            accountId,
            phone_code_hash: data.phone_code_hash,
            needsCode: true,
            needs2FA: false
          });
          setSuccess('Verification code sent! Check your Telegram app.');
        } else if (data.status === 'AUTHENTICATED') {
          setSuccess(`Connected successfully as @${data.username}!`);
          // Update the specific account's authentication status
          setAccounts(prev => prev.map(acc => 
            acc.id === accountId 
              ? { ...acc, is_authenticated: true, username: data.username }
              : acc
          ));
        }
      } else {
        if (data.error === '2FA_REQUIRED') {
          setLoginData(prev => prev ? { ...prev, needs2FA: true } : null);
          setError('Two-factor authentication required. Please enter your password.');
        } else {
          setError(data.error || 'Connection failed');
        }
      }
    } catch (error) {
      setError('Network error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleVerifyCode = async () => {
    if (!loginData || !verificationCode) return;

    setLoading(true);
    setError(null);

    try {
      const response = await fetch(`http://127.0.0.1:8000/accounts/${loginData.accountId}/connect`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          code: verificationCode,
          phone_code_hash: loginData.phone_code_hash,
          password: loginData.needs2FA ? twoFactorPassword : undefined
        }),
      });

      const data = await response.json();

      if (data.success) {
        setSuccess(`Connected successfully as @${data.username}!`);
        // Update the specific account's authentication status
        setAccounts(prev => prev.map(acc => 
          acc.id === loginData.accountId 
            ? { ...acc, is_authenticated: true, username: data.username }
            : acc
        ));
        setLoginData(null);
        setVerificationCode('');
        setTwoFactorPassword('');
      } else {
        if (data.error === '2FA_REQUIRED') {
          setLoginData(prev => prev ? { ...prev, needs2FA: true } : null);
          setError('Two-factor authentication required. Please enter your password.');
        } else {
          setError(data.error || 'Verification failed');
        }
      }
    } catch (error) {
      setError('Network error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteAccount = async (accountId: string) => {
    if (!confirm('Are you sure you want to delete this account?')) return;

    setLoading(true);
    try {
      const response = await fetch(`http://127.0.0.1:8000/accounts/${accountId}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        setSuccess('Account deleted successfully!');
        await loadAccounts();
      } else {
        setError('Failed to delete account');
      }
    } catch (error) {
      setError('Network error occurred');
    } finally {
      setLoading(false);
    }
  };

  // Function to open the visual scan interface
  const openVisualScanInterface = (accountId: string) => {
    const account = accounts.find(acc => acc.id === accountId);
    if (!account) {
      setError('Account not found');
      return;
    }
    if (!account.is_authenticated) {
      setError('Account is not authenticated. Please connect first.');
      return;
    }
    setSelectedAccountForScan(accountId);
    setShowVisualScan(true);
    // Reset scan states when opening the interface
    setIsScanning(false);
    setScanProgress(undefined);
    
    // Load last scan results from history
    const lastResults = scanHistory[accountId] || [];
    setLastScanResults(lastResults);
  };

  // Function to initiate the scan process (called from SimpleScanInterface)
  const startScanProcess = async (isFullScan: boolean, batchSize?: number) => {
    if (!selectedAccountForScan) {
      setError('No account selected for scan.');
      return;
    }

    setIsScanning(true);
    setScanProgress(undefined); // Clear previous progress
    setError(null);
    setSuccess(null);

    try {
      console.log(`Starting scan for account: ${selectedAccountForScan}, full scan: ${isFullScan}, batch size: ${batchSize}`);
      
      // Start the actual scan
      const response = await fetch(`http://127.0.0.1:8000/accounts/${selectedAccountForScan}/scan`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          account_id: selectedAccountForScan,
          include_private: false,
          chat_name_filters: [],
          dry_run: true, // Always dry run for scan
          test_mode: !isFullScan, // Test mode if not full scan
          full_scan: isFullScan, // Full scan if requested
          batch_size: batchSize || 1 // Scan one chat at a time
        }),
      });

      const data = await response.json();
      console.log('Backend response data:', data);

      if (data.success) {
        // Process the result immediately
        setIsScanning(false);
        processScanResult(data.result);
      } else {
        setError(data.error || 'Scan failed');
        setIsScanning(false);
      }
    } catch (error) {
      console.error('Scan network request failed:', error);
      setError('Network error occurred during scan. Please check your connection and server logs.');
      setIsScanning(false);
    }
  };

  // Function to stop the scan (client-side only, as backend is request-response)
  const handleScanStop = () => {
    setIsScanning(false);
    setScanProgress(undefined);
    setShowGlobalScanWindow(false);
    setGlobalScanningItems([]);
    setGlobalCurrentScanningItem(null);
    setGlobalIsPaused(false);
    // No backend action needed as it's a single request-response
  };

  // Function to process the final scan result from the backend
  const processScanResult = (result: any) => {
    console.log('Processing scan result:', result);
    setIsScanning(false);
    
    // Process chats and add required fields
    const processedChats = result.chats.map((chat: any) => ({
      ...chat,
      status: chat.error ? 'error' : (chat.skipped_reason ? 'skipped' : 'completed'),
      expanded: false,
      selected: false,
      messages: chat.messages || [],
      messages_found: chat.candidates_found || 0,
      messages_deleted: chat.deleted || 0
    }));
    
    setLastScanResults(processedChats);
    
    // Save to scan history
    if (selectedAccountForScan) {
      saveScanHistory(selectedAccountForScan, processedChats);
    }
    
    if (result.total_candidates > 0) {
      setSuccess(`סריקה הושלמה! נמצאו ${result.total_candidates} הודעות ב-${result.total_chats_processed} קבוצות.`);
    } else {
      setSuccess(`סריקה הושלמה! נסרקו ${result.total_chats_processed} קבוצות, לא נמצאו הודעות.`);
    }

    // Update final stats
    const total = processedChats.length;
    const completed = processedChats.filter((c: any) => c.status === 'completed').length;
    const skipped = processedChats.filter((c: any) => c.status === 'skipped').length;
    const errors = processedChats.filter((c: any) => c.status === 'error').length;
    
    setScanProgress({
      type: 'final_summary',
      status: 'סריקה הושלמה',
      total: total,
      completed: completed,
      skipped: skipped,
      errors: errors,
      totalMessages: result.total_candidates,
      totalDeleted: result.total_deleted,
      chats: processedChats
    });
  };

  // Semantic search functions
  const handleSemanticSearchStart = async (query: any) => {
    try {
      setIsSemanticSearching(true);
      setSemanticSearchResults([]);
      setError(null);
      
      console.log('Starting semantic search:', query);
      
      // Use SSE for real-time updates
      const eventSource = new EventSource(
        `http://127.0.0.1:8000/accounts/${query.account_id}/semantic-scan-events?query_text=${encodeURIComponent(query.query_text)}&fidelity=${query.fidelity}&time_frame_hours=${query.time_frame_hours}`
      );
      
      eventSource.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('SSE data received:', data);
          
          switch (data.type) {
            case 'connected':
              console.log('Connected to semantic search events');
              break;
              
            case 'search_started':
              setSemanticSearchProgress({
                status: 'searching',
                message: data.message,
                progress: 0,
                processed: 0,
                total: 0,
                matches: 0
              });
              break;
              
            case 'retrieving_messages':
              setSemanticSearchProgress(prev => ({
                ...prev,
                message: data.message,
                status: 'retrieving'
              }));
              break;
              
            case 'messages_retrieved':
              setSemanticSearchProgress(prev => ({
                ...prev,
                message: data.message,
                total: data.count,
                status: 'searching'
              }));
              break;
              
            case 'search_progress':
              setSemanticSearchProgress(prev => ({
                ...prev,
                progress: data.progress,
                processed: data.processed,
                total: data.total,
                matches: data.matches,
                message: `מחפש... ${data.processed}/${data.total} הודעות (${data.matches} תוצאות)`
              }));
              break;
              
            case 'match_found':
              setSemanticSearchResults(prev => [...prev, data.result]);
              setSemanticSearchProgress(prev => ({
                ...prev,
                matches: prev.matches + 1,
                message: `נמצאה תוצאה ${prev.matches + 1}: ${data.result.chat_name}`
              }));
              break;
              
            case 'search_complete':
              setSemanticSearchProgress(prev => ({
                ...prev,
                status: 'completed',
                message: `חיפוש הושלם! נמצאו ${data.total_matches} תוצאות מ-${data.total_messages} הודעות.`
              }));
              setSuccess(`חיפוש סמנטי הושלם! נמצאו ${data.total_matches} תוצאות מ-${data.total_messages} הודעות.`);
              eventSource.close();
              break;
              
            case 'error':
              setError(data.message);
              eventSource.close();
              break;
          }
        } catch (error) {
          console.error('Error parsing SSE data:', error);
        }
      };
      
      eventSource.onerror = (error) => {
        console.error('SSE error:', error);
        setError('שגיאת חיבור לחיפוש סמנטי');
        eventSource.close();
      };
      
    } catch (error) {
      console.error('Semantic search error:', error);
      setError('שגיאת רשת בחיפוש סמנטי. בדוק את החיבור והשרת.');
      setIsSemanticSearching(false);
    }
  };

  const handleSemanticSearchStop = () => {
    setIsSemanticSearching(false);
    setSemanticSearchProgress(null);
  };

  const clearMessages = () => {
    setError(null);
    setSuccess(null);
  };
  
  // A helper function to manage conditional rendering
  const renderAppContent = () => {
    const account = selectedAccountForScan ? accounts.find(acc => acc.id === selectedAccountForScan) : null;
    
    // Check for specific modal/page states first
    if (showScanModal) {
      return (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-md flex items-center justify-center z-50"
             onMouseMove={(e) => setMousePosition({ x: e.clientX, y: e.clientY })}>
          <div 
            className="glass-advanced p-8 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto"
            style={{
              '--mouse-x': `${mousePosition.x}px`,
              '--mouse-y': `${mousePosition.y}px`,
            } as React.CSSProperties}
          >
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-title text-white">
                {language === 'he' ? 'סריקת הודעות' : 'Scan Messages'}
              </h2>
              <button
                onClick={() => setShowScanModal(false)}
                className="btn-secondary"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
            
            <div className="space-y-6">
              <div className="text-center mb-8">
                <div className="glass-card p-6 mb-6">
                  <h3 className="text-subtitle text-white mb-4">
                    {language === 'he' ? 'בחר חשבון לסריקה' : 'Select Account to Scan'}
                  </h3>
                  <p className="text-body text-white/70 mb-6">
                    {language === 'he' 
                      ? 'בחר את החשבון שברצונך לסרוק את ההודעות שלו'
                      : 'Choose the account you want to scan messages for'
                    }
                  </p>
                  
                  <div className="space-y-4">
                    {accounts.map((acc) => (
                      <div key={acc.id} className="glass-card p-4 hover-lift cursor-pointer"
                           onClick={() => {
                             setShowScanModal(false);
                             openVisualScanInterface(acc.id);
                           }}>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center">
                            <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center mr-4">
                              <span className="text-white font-bold">
                                {acc.label?.charAt(0) || acc.phone?.charAt(0) || '?'}
                              </span>
                            </div>
                            <div>
                              <div className="text-body text-white font-medium">
                                {acc.label || acc.phone}
                              </div>
                              <div className="text-small text-white/70">
                                {acc.phone} • {acc.is_authenticated ? 'מחובר' : 'לא מחובר'}
                              </div>
                            </div>
                          </div>
                          <div className="flex items-center">
                            {acc.is_authenticated ? (
                              <div className="w-3 h-3 bg-green-400 rounded-full mr-2"></div>
                            ) : (
                              <div className="w-3 h-3 bg-red-400 rounded-full mr-2"></div>
                            )}
                            <ChevronRight className="w-4 h-4 text-white/50" />
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }

    if (showVisualScan && selectedAccountForScan && account) {
      if (uiMode === 'diamond') {
        return (
          <DiamondScanInterface
            accountId={selectedAccountForScan}
            accountLabel={account.label || 'Unknown'}
            onClose={() => {
              setShowVisualScan(false);
              setSelectedAccountForScan(null);
              setIsScanning(false);
              setScanProgress(undefined);
              setLastScanResults([]);
            }}
            onStartScan={(isFullScan, batchSize) => startScanProcess(isFullScan, batchSize)}
            onStopScan={handleScanStop}
            isScanning={isScanning}
            scanProgress={scanProgress}
            lastScanResults={lastScanResults}
          />
        );
      }
      return (
        <SimpleScanInterface
          accountId={selectedAccountForScan}
          accountLabel={account.label || 'Unknown'}
          onClose={() => {
              setShowVisualScan(false);
              setSelectedAccountForScan(null);
              setIsScanning(false);
              setScanProgress(undefined);
              setLastScanResults([]);
          }}
          onStartScan={(isFullScan, batchSize) => startScanProcess(isFullScan, batchSize)}
          onStopScan={handleScanStop}
          isScanning={isScanning}
          scanProgress={scanProgress}
          lastScanResults={lastScanResults}
          uiMode={uiMode}
        />
      );
    }
    
    if (showMessageWizard && selectedAccountForScan && account) {
      return (
        <MessageWizard
          accountId={selectedAccountForScan}
          accountLabel={account.label || 'Unknown'}
          onBack={() => {
            setShowMessageWizard(false);
            setSelectedAccountForScan(null);
          }}
        />
      );
    }

    if (showSemanticSearch && selectedAccountForScan && account) {
      return (
        <SemanticSearchModal
          isOpen={showSemanticSearch}
          onClose={() => {
            setShowSemanticSearch(false);
            setSelectedAccountForScan(null);
            setSemanticSearchResults([]);
            setIsSemanticSearching(false);
          }}
          accountId={selectedAccountForScan}
          onSearchStart={handleSemanticSearchStart}
          onSearchStop={handleSemanticSearchStop}
          isSearching={isSemanticSearching}
          searchProgress={semanticSearchProgress}
          searchResults={semanticSearchResults}
        />
      );
    }

    if (showMessagePreview) {
      return (
        <MessagePreview
          messages={previewMessages}
          onDeleteSelected={(messageIds) => {
            console.log('Delete messages:', messageIds);
            // Implement delete logic here
          }}
          onBack={() => {
            setShowMessagePreview(false);
            setPreviewMessages([]);
          }}
          isDeleting={false}
        />
      );
    }

    if (showSmartSearch && searchResults.messages) {
      return (
        <SmartSearchResults
          messages={searchResults.messages}
          prompt={searchResults.prompt || ''}
          keywords={searchResults.keywords || []}
          totalFound={searchResults.total_found || 0}
          onBack={() => {
            setShowSmartSearch(false);
            setSearchResults({});
          }}
        />
      );
    }
    
    // Main App content
    return (
      <div 
        className="min-h-screen relative" 
        dir={language === 'he' ? 'rtl' : 'ltr'}
      >
        {/* Background Image */}
        <div 
          className="absolute inset-0 bg-cover bg-center bg-no-repeat"
          style={{
            backgroundImage: 'url("/cosmic-background.jpg")'
          }}
        />
        {/* Overlay for better text readability */}
        <div className="absolute inset-0 bg-black/40 backdrop-blur-[1px]" />
        {/* Content */}
        <div className="relative z-10">
        <div className="container mx-auto px-4 py-8">
          
          {/* Header */}
          <div className="text-center mb-12 animate-fade-in-up">
            <div className="flex items-center justify-center mb-4">
              <div className="glass-elevated p-3 mr-4">
                <img src="/logo.png" alt="Messages Manager Logo" className="w-10 h-10 rounded-lg" />
              </div>
              <h1 className="text-headline text-white">
                {language === 'he' ? 'מנהל הודעות' : 'Messages Manager'}
              </h1>
              <div className="flex space-x-2">
                <button
                  onClick={() => setShowSettings(true)}
                  className="btn-secondary flex items-center"
                >
                  <Settings className="w-4 h-4 mr-2" />
                  {language === 'he' ? 'הגדרות' : 'Settings'}
                </button>
                
                <button
                  onClick={() => setShowFeaturesFile(true)}
                  className="btn-secondary flex items-center"
                >
                  <FileText className="w-4 h-4 mr-2" />
                  {language === 'he' ? 'קובץ שינויים' : 'Features File'}
                </button>
              </div>
            </div>
            <p className="text-subtitle max-w-2xl mx-auto">
              {language === 'he' 
                ? 'נהל את הודעות הטלגרם שלך בבטחה על פני מספר חשבונות'
                : 'Safely manage your Telegram messages across multiple accounts'
              }
            </p>
          </div>

          {/* Messages */}
          {(error || success) && (
            <div className="max-w-4xl mx-auto mb-6 animate-fade-in-up">
              {error && (
                <div className="status-error glass-card p-4 mb-4 flex items-center justify-between">
                  <div className="flex items-center">
                    <AlertCircle className="w-5 h-5 mr-3" />
                    <span className="text-body">{error}</span>
                  </div>
                  <button onClick={clearMessages} className="text-white hover:text-gray-300">
                    ×
                  </button>
                </div>
              )}
              {success && (
                <div className="status-success glass-card p-4 mb-4 flex items-center justify-between">
                  <div className="flex items-center">
                    <CheckCircle className="w-5 h-5 mr-3" />
                    <span className="text-body">{success}</span>
                  </div>
                  <button onClick={clearMessages} className="text-white hover:text-gray-300">
                    ×
                  </button>
                </div>
              )}
            </div>
          )}

          {/* Loading State */}
          {loading && (
            <div className="max-w-4xl mx-auto mb-8 animate-fade-in-up">
              <div className="glass-elevated p-6 text-center">
                <Loader className="w-8 h-8 animate-spin mx-auto mb-4 text-blue-400" />
                <span className="text-title text-white">Loading accounts...</span>
              </div>
            </div>
          )}

          {/* Add Account Button */}
          {!loading && (
            <div className="max-w-4xl mx-auto mb-8 animate-fade-in-up">
              <button
                onClick={() => setShowAddForm(true)}
                disabled={accounts.length >= 5}
                className="w-full glass-elevated p-6 hover-lift disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <div className="flex items-center justify-center">
                  <div className="glass-card p-3 mr-3">
                    <Plus className="w-8 h-8 text-blue-400" />
                  </div>
                  <span className="text-title text-white">
                    Add Account ({accounts.length}/5)
                  </span>
                </div>
              </button>
            </div>
          )}

          {/* Add Account Form */}
          {showAddForm && (
            <div className="max-w-2xl mx-auto mb-8 animate-fade-in-scale">
              <div className="glass-elevated p-8">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-title text-white">Add New Account</h2>
                  <button
                    onClick={() => setShowAddForm(false)}
                    className="text-gray-400 hover:text-white"
                  >
                    ×
                  </button>
                </div>
                
                <form onSubmit={handleAddAccount} className="space-y-6">
                  <div>
                    <label className="block text-caption font-medium text-white mb-2">
                      Account Label
                    </label>
                    <input
                      type="text"
                      value={newAccount.label}
                      onChange={(e) => setNewAccount(prev => ({ ...prev, label: e.target.value }))}
                      className="input-modern w-full"
                      placeholder="e.g., Personal, Work"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-caption font-medium text-white mb-2">
                      API ID
                    </label>
                    <input
                      type="number"
                      value={newAccount.api_id}
                      onChange={(e) => setNewAccount(prev => ({ ...prev, api_id: e.target.value }))}
                      className="input-modern w-full"
                      placeholder="Your API ID from my.telegram.org"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-caption font-medium text-white mb-2">
                      API Hash
                    </label>
                    <input
                      type="text"
                      value={newAccount.api_hash}
                      onChange={(e) => setNewAccount(prev => ({ ...prev, api_hash: e.target.value }))}
                      className="input-modern w-full"
                      placeholder="Your API Hash from my.telegram.org"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-caption font-medium text-white mb-2">
                      Phone Number
                    </label>
                    <input
                      type="tel"
                      value={newAccount.phone}
                      onChange={(e) => setNewAccount(prev => ({ ...prev, phone: e.target.value }))}
                      className="input-modern w-full"
                      placeholder="+1234567890"
                      required
                    />
                  </div>
                  
                  <div className="flex space-x-4">
                    <button
                      type="button"
                      onClick={() => {
                        setShowAddForm(false);
                        setLoading(false);
                        setError(null);
                        setSuccess(null);
                      }}
                      className="btn-secondary flex-1"
                      disabled={loading}
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      disabled={loading}
                      className="btn-primary flex-1 flex items-center justify-center"
                    >
                      {loading ? <Loader className="w-4 h-4 animate-spin mr-2" /> : null}
                      Add Account
                    </button>
                  </div>
                </form>
              </div>
            </div>
          )}

          {/* Login Form */}
          {loginData && (
            <div className="max-w-md mx-auto mb-8 animate-fade-in-up">
              <div className="glass-elevated p-8">
                <h3 className="text-title text-white mb-4">Verify Your Account</h3>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-caption font-medium text-white mb-2">
                      Verification Code
                    </label>
                    <input
                      type="text"
                      value={verificationCode}
                      onChange={(e) => setVerificationCode(e.target.value)}
                      className="input-modern w-full"
                      placeholder="Enter 5-digit code"
                      maxLength={5}
                    />
                  </div>
                  
                  {loginData?.needs2FA && (
                    <div>
                      <label className="block text-caption font-medium text-white mb-2">
                        2FA Password
                      </label>
                      <input
                        type="password"
                        value={twoFactorPassword}
                        onChange={(e) => setTwoFactorPassword(e.target.value)}
                        className="input-modern w-full"
                        placeholder="Enter your 2FA password"
                      />
                    </div>
                  )}
                  
                  <div className="flex space-x-4">
                    <button
                      onClick={() => setLoginData(null)}
                      className="btn-secondary flex-1"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleVerifyCode}
                      disabled={loading || !verificationCode}
                      className="btn-primary flex-1 flex items-center justify-center disabled:opacity-50"
                    >
                      {loading ? <Loader className="w-4 h-4 animate-spin mr-2" /> : null}
                      Verify
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Accounts List */}
          {!loading && (
            <div className="max-w-4xl mx-auto space-y-4">
              {accounts.map((account, index) => {
              const lastScanResults = scanHistory[account.id] || [];
              const totalMessages = lastScanResults.reduce((sum, chat) => sum + (chat.messages_found || 0), 0);
              const totalChats = lastScanResults.length;
              const chatsWithMessages = lastScanResults.filter(chat => chat.status === 'completed' && chat.messages && chat.messages.length > 0).length;
              
              return (
              <div key={account.id} className="glass-elevated p-8 animate-fade-in-up hover-lift" style={{ animationDelay: `${index * 0.1}s` }}>
                <div className="flex items-start justify-between">
                  <div className="flex items-start space-x-6">
                    {/* Account Avatar */}
                    <div className="glass-card p-4 rounded-2xl">
                      <User className="w-8 h-8 text-blue-400" />
                    </div>
                    
                    {/* Account Info */}
                    <div className="flex-1 min-w-0">
                      <div className="mb-4">
                        <h3 className="text-2xl font-bold text-white mb-2">{account.label}</h3>
                        <p className="text-lg text-gray-300 font-medium">{account.phone}</p>
                        {account.is_authenticated && account.username && (
                          <p className="text-sm text-green-400 font-medium mt-1">
                            ✅ מחובר כ-{account.username}
                          </p>
                        )}
                      </div>
                      
                      {/* Scanning Status */}
                      {isScanning && selectedAccountForScan === account.id && (
                        <div className="mb-4 p-3 bg-blue-500/20 border border-blue-500/30 rounded-xl">
                          <div className="flex items-center text-blue-300">
                            <Loader className="w-5 h-5 mr-3 animate-spin" />
                            <span className="font-medium">סורק כעת...</span>
                          </div>
                        </div>
                      )}
                      
                      {/* Scan Statistics */}
                      {lastScanResults.length > 0 && (
                        <div className="space-y-4">
                          {/* Main Stats Grid */}
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div className="glass-card p-4 rounded-xl text-center">
                              <div className="text-2xl font-bold text-blue-400 mb-1">{totalChats}</div>
                              <div className="text-sm text-white/70">קבוצות נסרקו</div>
                            </div>
                            <div className="glass-card p-4 rounded-xl text-center">
                              <div className="text-2xl font-bold text-green-400 mb-1">{chatsWithMessages}</div>
                              <div className="text-sm text-white/70">עם הודעות</div>
                            </div>
                            <div className="glass-card p-4 rounded-xl text-center">
                              <div className="text-2xl font-bold text-purple-400 mb-1">{totalMessages}</div>
                              <div className="text-sm text-white/70">הודעות סה"כ</div>
                            </div>
                            <div className="glass-card p-4 rounded-xl text-center">
                              <div className="text-2xl font-bold text-yellow-400 mb-1">{Math.round(totalMessages * 0.5)}</div>
                              <div className="text-sm text-white/70">דקות למחיקה</div>
                            </div>
                          </div>
                          
                          {/* Additional Info */}
                          <div className="glass-card p-4 rounded-xl">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                              <div className="flex items-center space-x-3">
                                <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                                <span className="text-white/80">סריקה אחרונה: {new Date().toLocaleString('he-IL')}</span>
                              </div>
                              <div className="flex items-center space-x-3">
                                <div className="w-2 h-2 bg-yellow-400 rounded-full"></div>
                                <span className="text-yellow-300 font-medium">{totalMessages} הודעות ממתינות למחיקה</span>
                              </div>
                              <div className="flex items-center space-x-3">
                                <div className="w-2 h-2 bg-red-400 rounded-full"></div>
                                <span className="text-red-300">0 הודעות נמחקו</span>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    {/* Connection Status */}
                    <div className="flex items-center">
                      {account.is_authenticated ? (
                        <div className="flex items-center text-green-400">
                          <Wifi className="w-4 h-4 mr-1" />
                          <span className="text-small">Connected</span>
                        </div>
                      ) : (
                        <div className="flex items-center text-gray-400">
                          <WifiOff className="w-4 h-4 mr-1" />
                          <span className="text-small">Not connected</span>
                        </div>
                      )}
                    </div>
                    
                    {/* Action Buttons */}
                    {account.is_authenticated ? (
                      <div className="flex space-x-2">
                        <button
                          onClick={() => setShowScanModal(true)}
                          className="btn-primary hover-lift flex items-center"
                        >
                          <Eye className="w-4 h-4 mr-1" />
                          Scan Messages
                        </button>
                        
                        <button
                          onClick={() => {
                            setSelectedAccountForScan(account.id);
                            setShowMessageWizard(true);
                          }}
                          className="btn-secondary hover-lift flex items-center"
                        >
                          <MessageSquare className="w-4 h-4 mr-1" />
                          Send Messages
                        </button>
                        
                        <button
                          onClick={() => {
                            setSelectedAccountForScan(account.id);
                            setShowSemanticSearch(true);
                          }}
                          className="btn-secondary hover-lift flex items-center"
                        >
                          <Search className="w-4 h-4 mr-1" />
                          Semantic Search
                        </button>
                      </div>
                    ) : (
                      <button
                        onClick={() => handleConnect(account.id)}
                        disabled={loading}
                        className="btn-primary flex items-center disabled:opacity-50"
                      >
                        {loading ? <Loader className="w-4 h-4 animate-spin mr-1" /> : null}
                        Connect
                      </button>
                    )}
                    
                    <button
                      onClick={() => handleDeleteAccount(account.id)}
                      className="btn-destructive p-2 hover-scale"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
              );
            })}
            </div>
          )}

          {/* Empty State */}
          {!loading && accounts.length === 0 && !showAddForm && (
            <div className="max-w-2xl mx-auto text-center animate-fade-in-up">
              <div className="glass-elevated p-12">
                <div className="glass-card p-6 w-fit mx-auto mb-4">
                  <MessageSquare className="w-16 h-16 text-gray-400" />
                </div>
                <h3 className="text-title text-white mb-2">No accounts added yet</h3>
                <p className="text-body text-gray-300 mb-6">
                  Add your first Telegram account to start managing your messages
                </p>
                <button
                  onClick={() => setShowAddForm(true)}
                  className="btn-primary hover-lift flex items-center mx-auto"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Add Your First Account
                </button>
              </div>
            </div>
          )}
        </div>
        
        {/* Settings Window */}
        {showSettings && (
          <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
            <div className="glass-elevated p-8 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-title text-white">
                  {language === 'he' ? 'הגדרות' : 'Settings'}
                </h2>
                <button
                  onClick={() => setShowSettings(false)}
                  className="btn-secondary"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
              
              <div className="space-y-6">
                {/* Language Selection */}
                <div className="glass-card p-6">
                  <h3 className="text-subtitle text-white mb-4">
                    {language === 'he' ? 'שפה' : 'Language'}
                  </h3>
                  <div className="flex space-x-4">
                    <button
                      onClick={() => setLanguage('he')}
                      className={`btn-modern flex-1 ${language === 'he' ? 'btn-primary' : 'btn-secondary'}`}
                    >
                      עברית
                    </button>
                    <button
                      onClick={() => setLanguage('en')}
                      className={`btn-modern flex-1 ${language === 'en' ? 'btn-primary' : 'btn-secondary'}`}
                    >
                      English
                    </button>
                  </div>
                </div>

                {/* UI Mode Selection */}
                <div className="glass-card p-6">
                  <h3 className="text-subtitle text-white mb-4">
                    {language === 'he' ? 'מצב ממשק' : 'UI Mode'}
                  </h3>
                  <div className="flex space-x-4">
                    <button
                      onClick={() => setUiMode('simple')}
                      className={`btn-modern flex-1 ${uiMode === 'simple' ? 'btn-primary' : 'btn-secondary'}`}
                    >
                      {language === 'he' ? 'ממשק פשוט' : 'Simple UI'}
                    </button>
                    <button
                      onClick={() => setUiMode('advanced')}
                      className={`btn-modern flex-1 ${uiMode === 'advanced' ? 'btn-primary' : 'btn-secondary'}`}
                    >
                      {language === 'he' ? 'ממשק מתקדם' : 'Advanced UI'}
                    </button>
                    <button
                      onClick={() => setUiMode('diamond')}
                      className={`btn-modern flex-1 ${uiMode === 'diamond' ? 'btn-primary' : 'btn-secondary'}`}
                    >
                      {language === 'he' ? 'ממשק יהלומים' : 'Diamond UI'}
                    </button>
                  </div>
                  <p className="text-small text-white/60 mt-2">
                    {language === 'he' 
                      ? 'ממשק פשוט: חלונית צפה בסיסית | ממשק מתקדם: מידע מפורט | ממשק יהלומים: מפה ויזואלית'
                      : 'Simple: Basic floating panel | Advanced: Detailed info | Diamond: Visual map'
                    }
                  </p>
                </div>

                {/* Logout */}
                <div className="glass-card p-6">
                  <h3 className="text-subtitle text-white mb-4">
                    {language === 'he' ? 'חשבון' : 'Account'}
                  </h3>
                  <button
                    onClick={() => {
                      if (confirm(language === 'he' ? 'האם ברצונך להתנתק?' : 'Are you sure you want to logout?')) {
                        // Clear all data and reset
                        setAccounts([]);
                        setError(null);
                        setSuccess(null);
                        setShowSettings(false);
                      }
                    }}
                    className="btn-destructive w-full"
                  >
                    {language === 'he' ? 'התנתק' : 'Logout'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Global Scanning Window */}
        <ScanningWindow
          isVisible={showGlobalScanWindow}
          scanningItems={globalScanningItems}
          currentItem={globalCurrentScanningItem}
          isPaused={globalIsPaused}
          scanProgress={globalScanProgress}
          onClose={() => {}} // No close button - only stop scan can close it
        />
      </div>
    );
  };
  
  return renderAppContent();
}

export default App;