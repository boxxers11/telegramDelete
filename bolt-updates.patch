diff --git a/app/telegram_delete.py b/app/telegram_delete.py
index 1234567..abcdefg 100644
--- a/app/telegram_delete.py
+++ b/app/telegram_delete.py
@@ -85,11 +85,13 @@ class TelegramDeleter:
             if not await self.client.is_user_authorized():
                 if phone:
                     # Send code request
                     self.log(f"Sending verification code to {phone}")
-                    await self.safe_api_call(self.client.send_code_request, phone)
+                    sent_code = await self.safe_api_call(self.client.send_code_request, phone)
                     self.log("Verification code sent successfully")
                     return {
                         "success": True, 
                         "status": "CODE_SENT",
+                        "phone_code_hash": sent_code.phone_code_hash,
                         "message": "Verification code sent to your Telegram app"
                     }
                 else:
@@ -120,7 +122,7 @@ class TelegramDeleter:
         return {"success": False, "error": error_msg}
     
-    async def sign_in_with_code(self, phone: str, code: str, password: str = None) -> Dict[str, Any]:
+    async def sign_in_with_code(self, phone: str, code: str, password: str = None, phone_code_hash: str = None) -> Dict[str, Any]:
         """Sign in with verification code and optional 2FA password"""
         try:
             if not self.client:
@@ -140,7 +142,7 @@ class TelegramDeleter:
             
             try:
                 self.log(f"Signing in with code: {clean_code}")
-                await self.safe_api_call(self.client.sign_in, phone=phone, code=clean_code)
+                await self.safe_api_call(self.client.sign_in, phone=phone, code=clean_code, phone_code_hash=phone_code_hash)
                 self.log("Sign in with code successful")
             except SessionPasswordNeededError:
                 self.log("2FA password required")
diff --git a/app/main.py b/app/main.py
index 1234567..abcdefg 100644
--- a/app/main.py
+++ b/app/main.py
@@ -25,6 +25,7 @@ class CreateAccountRequest(BaseModel):
 
 class ConnectAccountRequest(BaseModel):
     code: Optional[str] = None
+    phone_code_hash: Optional[str] = None
     password: Optional[str] = None
 
 class ConnectRequest(BaseModel):
@@ -110,6 +111,7 @@ async def connect_account(account_id: str, data: ConnectAccountRequest):
             sign_in_result = await account_deleter.sign_in_with_code(
                 phone=account.phone,
                 code=data.code,
+                phone_code_hash=data.phone_code_hash,
                 password=data.password
             )
             logger.info(f"Sign in result: {sign_in_result}")